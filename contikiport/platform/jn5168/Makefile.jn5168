ifndef CONTIKI
  $(error CONTIKI not defined! You must specify where CONTIKI resides!)
endif

#ifeq ($(HOST_OS),Darwin)
#  AROPTS = rc
#endif

ifeq ($(UIP_CONF_IPV6),1)
CFLAGS += -DWITH_UIP6=1
endif

CONTIKI_TARGET_DIRS = . dev
CONTIKI_TARGET_MAIN = ${addprefix $(OBJECTDIR)/,contiki-main.o}

CONTIKI_TARGET_SOURCEFILES = contiki-main.c clock.c sprintf.c uart0.c watchdog.c timer-arch.c leds-arch.c
#leds.c leds-arch.c \
#                button-sensor.c pir-sensor.c vib-sensor.c xmem.c \
#                sensors.c irq.c 
          			#cfs-posix.c cfs-posix-dir.c ctk-curses.c

CONTIKI_SOURCEFILES += $(CONTIKI_TARGET_SOURCEFILES)

.SUFFIXES:

#SDK_BASE_DIR ?= $(abspath $(CONTIKI)/platform/jn5168/Jennic)
### Define the CPU directory
CONTIKI_CPU=$(CONTIKI)/cpu/jn516x
include $(CONTIKI)/cpu/jn516x/Makefile.jn51xx
#
################################################################################
#############################################################################
## Application target name
#JN_TARGET = $(CONTIKI_PROJECT)
#
###############################################################################
## Path definitions
## Select definitions for either single or multiple targets
#
## Use if application directory contains multiple targets
#
#APP_BLD_DIR		?= $(OBJECTDIR)
#APP_SRC_DIR 	        ?= $(OBJECTDIR)
#APP_COMMON_SRC_DIR 	?= $(OBJECTDIR)
#APP_BIN_DIR		?= $(OBJECTDIR)
#
#
#
################################################################################
## Include the chip or chip family definitions.
## Chip takes precendence over chip family
#
##ifdef JENNIC_CHIP
##include $(SDK_BASE_DIR)/Chip/$(JENNIC_CHIP)/Build/config_$(JENNIC_CHIP).mk
##else
##ifdef JENNIC_CHIP_FAMILY
##include $(SDK_BASE_DIR)/Chip/$(JENNIC_CHIP_FAMILY)/Build/config_$(JENNIC_CHIP_FAMILY).mk
##else
##$(error JENNIC_CHIP or JENNIC_CHIP_FAMILY must be specified)
##endif
##endif
#
################################################################################
#
#ifndef JENNIC_STACK
#JENNIC_STACK = MAC
#endif
#
################################################################################
## Define the selected Jennic chip
#
#CFLAGS += -DJENNIC_CHIP=$(JENNIC_CHIP)
#CFLAGS += -DJENNIC_CHIP_$(JENNIC_CHIP)
#CFLAGS += -DJENNIC_CHIP_FAMILY=$(JENNIC_CHIP_FAMILY)
#CFLAGS += -DJENNIC_CHIP_FAMILY_$(JENNIC_CHIP_FAMILY)
#
#CFLAGS += -DJENNIC_STACK_$(JENNIC_STACK)
#
################################################################################
## Chip independent compiler options
#
#CFLAGS += -Wall
#CFLAGS += -Wunreachable-code
#
#
#
################################################################################
#
## Ensure chip and family are set
#override JENNIC_CHIP_FAMILY = JN516x
#
## Define numeric value for chip type
#CFLAGS += -DJN516x=5160
#CFLAGS += -DJN5168=5168
#CFLAGS += -DJENNIC_CHIP_NAME=_JN5168
#
## Base dir for selected chip
#CHIP_BASE_DIR = $(SDK_BASE_DIR)/Chip/$(JENNIC_CHIP)
#
## include definitions for the BA2 architecture
##include $(SDK_BASE_DIR)/Chip/Common/Build/config_ba2.mk
#
## Chip specific C flags
## watchdog is enabled by default on chip so allow disable if reqd
#CFLAGS += -DWATCHDOG_ENABLED
#
## Feature set:
##   JENNIC_HW_xx is silicon feature and so fixed
##   JENNIC_SW_xx is build option and can be changed
##
##   JENNIC_HW_BBC_RXINCCA:    BBC RX during CCA capability
##   JENNIC_HW_BBC_DMA:        BBC frame buffer DMA mechanism
##   JENNIC_HW_BBC_ISA:        BBC inline security engine 
##   JENNIC_SW_EXTERNAL_FLASH: whether external flash is supported
##   JN516X_DMA_UART_BACKWARDS_COMPATIBLE_API: API behaves like the older versions with no visible UART DMA 
##   JN516X_BACKWARDS_COMPATIBLE_API: API behaves like the older versions (supercedes above)
##   PDM_DESCRIPTOR_BASED_API: Use standard API interface 
##
#CFLAGS += -DJENNIC_HW_BBC_RXINCCA=1
#CFLAGS += -DJENNIC_HW_BBC_DMA=1
#CFLAGS += -DJENNIC_HW_BBC_ISA=0
#CFLAGS += -DJENNIC_SW_EXTERNAL_FLASH=0
#CFLAGS += -DJN516X_DMA_UART_BACKWARDS_COMPATIBLE_API=1
#CFLAGS += -DJN516X_BACKWARDS_COMPATIBLE_API=1
#CFLAGS += -DPDM_DESCRIPTOR_BASED_API=1
#
## Linker flags
#LDFLAGS += -nostartfiles
#LDFLAGS += -mba2_elf
#LDFLAGS += -march=ba2
#
## Library search paths
#LDFLAGS += -L$(CHIP_BASE_DIR)/Build
#LDFLAGS += -L$(CHIP_BASE_DIR)/Library
#
## Standard libraries: Peripheral API, MAC, etc.
#ifneq ($(JENNIC_STACK), None)
#LDLIBS  += AppApi_$(REDUCED_MAC_LIB_SUFFIX)$(JENNIC_CHIP_FAMILY)
#LDLIBS  += Mac_$(REDUCED_MAC_LIB_SUFFIX)$(JENNIC_CHIP_FAMILY)
#LDLIBS  += Tof_$(JENNIC_CHIP_FAMILY)
#LDLIBS  += Xcv_$(JENNIC_CHIP_FAMILY)
#endif
#LDLIBS  += AES_CCM_SW_PATCH_$(JENNIC_CHIP_FAMILY)
#LDLIBS  += Aes_$(JENNIC_CHIP_FAMILY)
#LDLIBS  += TimerServer_$(JENNIC_CHIP_FAMILY)
#LDLIBS  += HardwareApi_$(JENNIC_CHIP_FAMILY)
#LDLIBS  += MicroSpecific_$(JENNIC_CHIP_FAMILY)
#LDLIBS  += Boot_$(JENNIC_CHIP_FAMILY)
#LDLIBS  += Maths_$(JENNIC_CHIP_FAMILY)
#
## Stack-specific libraries: JIP uses the PDM EEPROM variant
#ifeq ($(JENNIC_STACK), JIP)
#LDLIBS  += PDM_EEPROM_$(JENNIC_CHIP_FAMILY)
#endif
#
## Export linker command file if building patch library
#ifeq ($(JENNIC_STACK), None)
#LINKER_FILE = AppBuildNone
#else
#ifeq ($(JENNIC_STACK), JIP)
#LINKER_FILE = AppBuildJip
#else
#LINKER_FILE = AppBuildMac
#endif
#endif
#LINKCMD ?= $(LINKER_FILE)_$(JENNIC_CHIP).ld
#
## Hardware debug support (NOTE: JN516x doesn't need separate library as JTag initialised in bootloader)
#ifeq ($(HARDWARE_DEBUG_ENABLED), 1)
#LDFLAGS += -Wl,--defsym,g_bSWConf_Debug=1
#ifeq ($(DEBUG_PORT), UART1)
#LDFLAGS += -Wl,-defsym,g_bSWConf_AltDebugPort=1
#else
#ifneq ($(DEBUG_PORT), UART0)
#$(error if DEBUG=HW: Must define DEBUG_PORT=UART0 or DEBUG_PORT=UART1)
#endif
#endif
#$(info  Building HW debug version ...)
#
#endif
#
##########################################################################
## exports
#
##export JENNIC_CHIP_FAMILY JENNIC_CHIP LDLIBS CFLAGS LDFLAGS LINKCMD
#
###############################################################################
## User definable make parameters that may be overwritten from the command line
#
## Default target device is the JN5148, (JN5148J01, JN5142J01, JN5168, JN5164 also valid)
#JENNIC_CHIP ?= JN5168
#
## Figure out chip family and short chip name
#ifeq ($(JENNIC_CHIP), JN5168)
#JENNIC_CHIP_FAMILY = JN516x
#JENNIC_CHIP_SHORT = 68
#endif
#
#ifeq ($(JENNIC_CHIP), JN5164)
#JENNIC_CHIP_FAMILY = JN516x
#JENNIC_CHIP_SHORT = 64
#endif
#
#ifeq ($(JENNIC_CHIP), JN5148)
#JENNIC_CHIP_FAMILY = JN514x
#JENNIC_CHIP_SHORT = 48
#endif
#
#ifeq ($(JENNIC_CHIP), JN5148J01)
#JENNIC_CHIP_FAMILY = JN514x
#JENNIC_CHIP_SHORT = 8J
#endif
#
#ifeq ($(JENNIC_CHIP), JN5142J01)
#JENNIC_CHIP_FAMILY = JN514x
#JENNIC_CHIP_SHORT = 2J
#endif
#
## Default driver device is DR1174, (but really has no effect on this template router) 
#DEVICE_NAME ?= DR1174
#
## Figure out node type ?
#ifeq ($(JENNIC_CHIP_FAMILY), JN516x) 
## JN516x defaults to Router (can be EndDevice)
#NODE_TYPE ?= EndDevice
#endif
#
## Calculate character for node type
#ifeq ($(NODE_TYPE), Coordinator) 
#NODE_TYPE_CHAR = c
#endif
#ifeq ($(NODE_TYPE), Router) 
#NODE_TYPE_CHAR = r
#endif
#ifeq ($(NODE_TYPE), EndDevice) 
#NODE_TYPE_CHAR = e
#endif
#
## Optional config.mk for network id and channel
##sinclude $(APP_BASE)/Common/Build/config.mk
#
## Default network id is 0x11111111
#NETWORK_ID ?= 0x11111111
#
## Default all channels (11-26 selects a single channel)
#CHANNEL ?= 15
#
## Default security on */
#SECURITY ?= 0
#
## Default production build off */
#PRODUCTION ?= 0
#
## Factory reset PDM magic number (0 for default)
#FACTORY_RESET_MAGIC ?= 0
#
## Default DK4 development kit target hardware
#JENNIC_PCB ?= DEVKIT4
#
## Default stack (may be overridden below)
#JENNIC_STACK ?= MAC
#
## Default OND Chipset 0=disabled (may be overidden below) 
##OND_CHIPSET     ?= 0
##OND_DEVICE_TYPE ?= 0
#
## Select the network stack (e.g. MAC, ZBPRO)
#
#OND_CHIPSET  = 5168
#JENNIC_STACK = None
##JIP
#
#JENNIC_BOOT ?= None
#
#
## Define TRACE to use with DBG module
#TRACE ?=0
#
## Debug options define DEBUG for HW debug
##DEBUG ?=HW
#
## Define which UART to use for debug
#DEBUG_PORT ?= UART0
#
## Production build ?
##ifneq ($(PRODUCTION), 0)
## Enforce security
##SECURITY := 1
##endif
#
## Device type
#JIP_DEVICE_TYPE ?= 0x0002
#JIP_DEVICE_TYPE_CHAR = T
#
#
# # Set manufactuerer ID (0801 = NXP)
#JIP_CR_MANUFACTURER_ID = 0801
#JIP_ED_MANUFACTURER_ID = 8801
#
## Set appropriate IDs and Types for this device
#ifeq ($(DEVICE_NAME), DR1174)
#ifeq ($(NODE_TYPE), Router) 
#JIP_PRODUCT_ID    = 1174
#JIP_DEVICE_ID     = 0x$(JIP_CR_MANUFACTURER_ID)$(JIP_PRODUCT_ID)
#OND_DEVICE_TYPE   = 0x$(JIP_CR_MANUFACTURER_ID)$(JIP_PRODUCT_ID)
#endif
#ifeq ($(NODE_TYPE), EndDevice) 
#JIP_PRODUCT_ID    = 1174
#JIP_DEVICE_ID     = 0x$(JIP_ED_MANUFACTURER_ID)$(JIP_PRODUCT_ID)
#OND_DEVICE_TYPE   = 0x$(JIP_ED_MANUFACTURER_ID)$(JIP_PRODUCT_ID)
#endif
#endif
#
## Build JIP Node Name (prefix of Node MIB Name variable
#JIP_NODE_NAME ?= $(JIP_DEVICE_TYPE_CHAR)$(JIP_PRODUCT_ID)$(NODE_TYPE_CHAR)$(JENNIC_CHIP_SHORT)
#
## Flags to build stack MIB persistance support
##BLD_MIB_NODE         = 1
##BLD_MIB_GROUP        = 1
#
## Flags to build and register common MIBs
##BLD_MIB_NODE_STATUS  = 1
##REG_MIB_NODE_STATUS  = 1
#
##BLD_MIB_NODE_CONTROL = 1
##REG_MIB_NODE_CONTROL = 1
#
##BLD_MIB_ADC_STATUS   = 1
##REG_MIB_ADC_STATUS   = 0
#
##BLD_MIB_NWK_CONFIG   = 1
##REG_MIB_NWK_CONFIG   = 0
#
##BLD_MIB_NWK_PROFILE  = 0
##REG_MIB_NWK_PROFILE  = 0
#
##BLD_MIB_NWK_STATUS   = 1
##REG_MIB_NWK_STATUS   = 1
#
##BLD_MIB_NWK_SECURITY = 1
##REG_MIB_NWK_SECURITY = 1
#
##BLD_MIB_NWK_TEST     = 0
##REG_MIB_NWK_TEST     = 0
#
## Zero version if not passed in on the command line 
#VERSION ?= 0
## Need to create a time based version number ? 
#ifeq ($(VERSION), 0)
## Get touched time
#TEMP := $(shell touch touch.txt)
#TOUCHED := $(word 6, $(shell ls -l --time-style=+%w%H%M touch.txt))
#VERSION := $(TOUCHED)
#else ifeq ($(VERSION), 1)
## Get touched time
#TEMP := $(shell touch touch.txt)
#TOUCHED := $(word 6, $(shell ls -l --time-style=+%y%m%d touch.txt))
#VERSION := $(TOUCHED)
#else
#TOUCHED := 0
#endif
#
## Set makefile defines 
#CFLAGS += -DMK_TARGET=\"$(JN_TARGET)\"
#CFLAGS += -DMK_DEVICE_NAME=\"$(DEVICE_NAME)\"
#CFLAGS += -DMK_JIP_NODE_NAME=\"$(JIP_NODE_NAME)\"
#ifeq ($(NODE_TYPE), Router)
#CFLAGS += -DMK_NODE_TYPE=E_JIP_DEVICE_ROUTER
#endif
#ifeq ($(NODE_TYPE), EndDevice)
#CFLAGS += -DMK_NODE_TYPE=E_JIP_DEVICE_END_DEVICE
#CFLAGS += -DMK_BLD_NODE_TYPE_END_DEVICE
#endif
#CFLAGS += -DMK_VERSION=\"$(VERSION)\"
#CFLAGS += -DMK_JIP_DEVICE_ID=$(JIP_DEVICE_ID)
#CFLAGS += -DMK_JIP_DEVICE_TYPE=$(JIP_DEVICE_TYPE)
#CFLAGS += -DMK_NETWORK_ID=$(NETWORK_ID)
#CFLAGS += -DMK_CHANNEL=$(CHANNEL)
#CFLAGS += -DMK_SECURITY=$(SECURITY)
#CFLAGS += -DMK_PRODUCTION=$(PRODUCTION)
#ifneq ($(FACTORY_RESET_MAGIC), 0)
#CFLAGS += -DMK_FACTORY_RESET_MAGIC=$(FACTORY_RESET_MAGIC)
#endif
#CFLAGS += -DMK_SRC_BUS_VOLTS_INT=$(SRC_BUS_VOLTS_INT)
##CFLAGS += -DMK_BLD_MIB_NODE=$(BLD_MIB_NODE)
##CFLAGS += -DMK_BLD_MIB_GROUP=$(BLD_MIB_GROUP)
##CFLAGS += -DMK_BLD_MIB_NODE_STATUS=$(BLD_MIB_NODE_STATUS)
##CFLAGS += -DMK_REG_MIB_NODE_STATUS=$(REG_MIB_NODE_STATUS)
##CFLAGS += -DMK_BLD_MIB_NODE_CONTROL=$(BLD_MIB_NODE_CONTROL)
##CFLAGS += -DMK_REG_MIB_NODE_CONTROL=$(REG_MIB_NODE_CONTROL)
##CFLAGS += -DMK_BLD_MIB_ADC_STATUS=$(BLD_MIB_ADC_STATUS)
##CFLAGS += -DMK_REG_MIB_ADC_STATUS=$(REG_MIB_ADC_STATUS)
##CFLAGS += -DMK_BLD_MIB_NWK_CONFIG=$(BLD_MIB_NWK_CONFIG)
##CFLAGS += -DMK_REG_MIB_NWK_CONFIG=$(REG_MIB_NWK_CONFIG)
##CFLAGS += -DMK_BLD_MIB_NWK_PROFILE=$(BLD_MIB_NWK_PROFILE)
##CFLAGS += -DMK_REG_MIB_NWK_PROFILE=$(REG_MIB_NWK_PROFILE)
##CFLAGS += -DMK_BLD_MIB_NWK_STATUS=$(BLD_MIB_NWK_STATUS)
##CFLAGS += -DMK_REG_MIB_NWK_STATUS=$(REG_MIB_NWK_STATUS)
##CFLAGS += -DMK_BLD_MIB_NWK_SECURITY=$(BLD_MIB_NWK_SECURITY)
##CFLAGS += -DMK_REG_MIB_NWK_SECURITY=$(REG_MIB_NWK_SECURITY)
##CFLAGS += -DMK_BLD_MIB_NWK_TEST=$(BLD_MIB_NWK_TEST)
##CFLAGS += -DMK_REG_MIB_NWK_TEST=$(REG_MIB_NWK_TEST)
#CFLAGS += -DEMBEDDED
#CFLAGS += -DUSER_VSR_HANDLER
#CFLAGS += -fno-common
#ifeq ($(TRACE), 1)
#CFLAGS += -DDBG_ENABLE
#BUILD  = _DEBUG
#endif
#
## Production build disabled ? */
#ifeq ($(PRODUCTION), 0)
#	# Security disabled ? */
#	ifeq ($(SECURITY), 0)
#	SECURITY_CHAR = u
#	else
#	SECURITY_CHAR = s
#	endif
#else
#	SECURITY_CHAR = p
#endif
#
## Build name with non single channel specified 
#ifeq ($(CHANNEL), 0)
#NAME_PREFIX = $(NETWORK_ID)$(SECURITY_CHAR)
#else
#NAME_PREFIX = $(NETWORK_ID)$(SECURITY_CHAR)_CH$(CHANNEL)
#endif
#
## Build name with version 
#ifeq ($(TOUCHED), 0)
#NAME_POSTFIX = $(DEVICE_NAME)_$(NODE_TYPE)_$(JENNIC_CHIP)$(BUILD)_v$(VERSION)
#else
#NAME_POSTFIX = $(DEVICE_NAME)_$(NODE_TYPE)_$(JENNIC_CHIP)$(BUILD)
#endif
#
#
###############################################################################
## Application Source files
#
## Note: Path to source file is found using vpath below, so only .c filename is required
## Router files 
##APPSRC += DeviceTemplate.c
##APPSRC += Node.c
##APPSRC += Exception.c
##APPSRC += Security.c
##ifeq ($(JENNIC_CHIP_FAMILY), JN516x)
##APPSRC += AHI_EEPROM.c
##endif
#
## Mib Common files
##ifneq ($(BLD_MIB_GROUP), 0)
##APPSRC += MibGroupDec.c
##endif
##ifneq ($(BLD_MIB_NODE), 0)
##APPSRC += MibNodeDec.c
##endif
##ifneq ($(BLD_MIB_ADC_STATUS), 0)
##APPSRC += MibAdcStatusDec.c
##APPSRC += MibAdcStatusPatch.c
##endif
##ifneq ($(BLD_MIB_NODE_STATUS), 0)
##APPSRC += MibNodeStatusDec.c
##endif
##ifneq ($(BLD_MIB_NODE_CONTROL), 0)
##APPSRC += MibNodeControlDec.c
##endif
##ifneq ($(BLD_MIB_NWK_STATUS), 0)
##APPSRC += MibNwkStatusDec.c
##endif
##ifneq ($(BLD_MIB_NWK_CONFIG), 0)
##APPSRC += MibNwkConfigDec.c
##APPSRC += MibNwkConfigPatch.c
##endif
##ifneq ($(BLD_MIB_NWK_PROFILE), 0)
##APPSRC += MibNwkProfileDec.c
##APPSRC += MibNwkProfile.c
##endif
##ifneq ($(BLD_MIB_NWK_SECURITY), 0)
##APPSRC += MibNwkSecurityDec.c
##APPSRC += MibNwkSecurityPatch.c
##endif
##ifneq ($(BLD_MIB_NWK_TEST), 0)
##APPSRC += MibNwkTestDec.c
##APPSRC += MibNwkTest.c
##endif
#
## Other files
##APPSRC += Uart.c
#
###############################################################################
## Additional Application Source directories
## Define any additional application directories outside the application directory
## e.g. for AppQueueApi
#
#ADDITIONAL_SRC_DIR += $(APP_BASE)/$(JN_TARGET)/Source
#ADDITIONAL_SRC_DIR += $(COMPONENTS_BASE_DIR)/Utilities/Source
#
###############################################################################
## Standard Application header search paths
#INCFLAGS += -I$(APP_SRC_DIR)
#INCFLAGS += -I$(APP_SRC_DIR)/..
#INCFLAGS += -I$(APP_COMMON_SRC_DIR)
#INCFLAGS += -I$(ADDITIONAL_SRC_DIR) 
#INCFLAGS += -I$(APP_BASE)/MibCommon/Include
#
## Application specific include files
#INCFLAGS += -I$(COMPONENTS_BASE_DIR)/JenNet/Include
#INCFLAGS += -I$(COMPONENTS_BASE_DIR)/6LP/Include
#INCFLAGS += -I$(COMPONENTS_BASE_DIR)/OS/Include
#INCFLAGS += -I$(COMPONENTS_BASE_DIR)/JIP/Include
#INCFLAGS += -I$(COMPONENTS_BASE_DIR)/Utilities/Include
#INCFLAGS += -I$(COMPONENTS_BASE_DIR)/Aes/Include
#
#CFLAGS += $(INCFLAGS)
###############################################################################
##  Application libraries (non-JN5142J01)
#ifneq ($(JENNIC_CHIP), JN5142J01)
## Application libraries
##MYLIBS += MibCommon
#endif
#
## Chip family libraries 
#ifeq ($(JENNIC_CHIP), JN5142J01)
#APPLIBS += DBG
#APPLIBS += Recal
#else ifeq ($(JENNIC_CHIP), JN5148J01)
#APPLIBS += DBG
#APPLIBS += Recal
#APPLIBS += PDM
#APPLIBS += JIP
#else ifeq ($(JENNIC_CHIP), JN5148)
#APPLIBS += DBG
#APPLIBS += Recal
#APPLIBS += PDM
#APPLIBS += JIP
#else 
#APPLIBS += DBG
#APPLIBS += Recal
#APPLIBS += PDM_EEPROM
#APPLIBS += JIP
#APPLIBS += JenNet
#APPLIBS += 6LP
#endif
#
## Chip specific libraries
#ifeq ($(JENNIC_CHIP), JN5148J01)
#STACKLIBS += JenNet
#STACKLIBS += 6LP
#else ifeq ($(JENNIC_CHIP), JN5148)
#STACKLIBS += JenNet_CR_NOSLEEP
#STACKLIBS += 6LP_CR_NOSLEEP
#endif
#
###############################################################################
#
## You should not need to edit below this line
#
###############################################################################
###############################################################################
## Configure for the selected PLatform and stack
#include $(SDK_BASE_DIR)/Chip/Common/Build/config.mk
#include $(SDK_BASE_DIR)/Platform/Common/Build/Config.mk
#include $(SDK_BASE_DIR)/Stack/Common/Build/config.mk
#
################################################################################
## App library folders
#LDFLAGS += -L$(APP_BASE)/MibCommon/Build
#
################################################################################
## OND / 2 stage bootloader setup 
##ifneq ($(OND_CHIPSET), 0)
##LDFLAGS += -Wl,--defsym,OND_DEV_TYPE=$(OND_DEVICE_TYPE)
##LDFLAGS += -Wl,--defsym,OND_CHIPSET=$(OND_CHIPSET)
##LDFLAGS += -Wl,--defsym,OND_REVISION=$(VERSION)
##endif
#
#LDFLAGS += -mba2_elf
##LDFLAGS += -march=ba2
#
###############################################################################
#
#APPOBJS = $(APPSRC:.c=.o)
#
###############################################################################
## Application dynamic dependencies
#
#APPDEPS = $(APPOBJS:.o=.d)
#
##########################################################################
## Linker
#
## Add application libraries before chip specific libraries to linker so
## symbols are resolved correctly (i.e. ordering is significant for GCC)
#
#LDMYLIBS := $(addsuffix _$(JENNIC_CHIP_FAMILY)$(BUILD),$(MYLIBS)) $(LDMYLIBS)
#LDLIBS := $(addsuffix _$(JENNIC_CHIP_FAMILY),$(APPLIBS)) $(LDLIBS)
#LDSTACKLIBS := $(addsuffix _$(JENNIC_CHIP),$(STACKLIBS)) $(LDSTACKLIBS)
#
##########################################################################
## Dependency rules
#
#.PHONY: all clean
## Path to directories containing application source 
#vpath % $(APP_SRC_DIR):$(APP_COMMON_SRC_DIR):$(ADDITIONAL_SRC_DIR):$(APP_BASE)/MibCommon/Source
#
#.PRECIOUS: %.elf
#
## OND Disabled ? 
#ifeq ($(OND_CHIPSET), 0)
#all: $(APP_BIN_DIR)/$(NAME_PREFIX)_$(JN_TARGET)_$(NAME_POSTFIX)$(BIN_SUFFIX).bin
## OND Enabled ?
#else
#ifeq ($(JENNIC_CHIP_FAMILY), JN516x)
#all: $(APP_BIN_DIR)/$(NAME_PREFIX)_$(JN_TARGET)_$(NAME_POSTFIX)$(BIN_SUFFIX).bin
#else
#all: $(APP_BIN_DIR)/$(NAME_PREFIX)_$(JN_TARGET)_$(NAME_POSTFIX)$(BIN_SUFFIX).bin $(APP_BIN_DIR)/$(NAME_PREFIX)_$(JN_TARGET)_$(NAME_POSTFIX)$(BIN_SUFFIX).ond
#endif
#endif
#
#-include $(APPDEPS)
#%.d:
#	rm -f $*.o
#
#
#%.o: %.S
#	$(info Assembling $< ...)
#	$(CC) -c -o $(subst Source,Build,$@) $(CFLAGS) $(INCFLAGS) $< -MD -MF $*.d -MP
#	@echo
#
#%.o: %.c 
#	$(info Compiling $< ...)
#	$(CC) -c -o $(subst Source,Build,$@) $(CFLAGS) $(INCFLAGS) $< -MD -MF $*.d -MP
#	@echo
#
#$(APP_BIN_DIR)/$(NAME_PREFIX)_$(JN_TARGET)_$(NAME_POSTFIX)$(BIN_SUFFIX).elf: $(APPOBJS) $(addsuffix _$(JENNIC_CHIP_FAMILY).a,$(addprefix $(COMPONENTS_BASE_DIR)/Library/lib,$(APPLIBS)))
#	$(info Linking $@ ...)
#	$(CC) -Wl,--gc-sections -Wl,-u_AppColdStart -Wl,-u_AppWarmStart $(LDFLAGS) -T$(LINKCMD) -o $@ -Wl,--start-group $(APPOBJS) $(addprefix -l,$(LDLIBS)) $(addprefix -l,$(LDSTACKLIBS)) $(addprefix -l,$(LDMYLIBS)) -Wl,--end-group -Wl,-Map,$(NAME_PREFIX)_$(JN_TARGET)_$(NAME_POSTFIX)$(BIN_SUFFIX).map 
#	@echo
#	
#%.nm: %.elf
#	$(NM) -nS $< > $@
#
#%.dmp: %.elf
#	$(OBJDUMP) -d $< > $@
#	
## OND Disabled ? 
#ifeq ($(OND_CHIPSET), 0)
#
#$(APP_BIN_DIR)/$(NAME_PREFIX)_$(JN_TARGET)_$(NAME_POSTFIX)$(BIN_SUFFIX).bin: $(APP_BIN_DIR)/$(NAME_PREFIX)_$(JN_TARGET)_$(NAME_POSTFIX)$(BIN_SUFFIX).elf 
#	$(info Generating binary ...)
#	$(OBJCOPY) $< $$( $(OBJDUMP) -h $< | sed -n 's/^ *[0-9]* \(.rom[._[:alnum:]]*\).*/-R \1/p' )
#	$(OBJCOPY) -S -O binary $< $@
#	$(info JENNIC_CHIP     = $(JENNIC_CHIP))
#	$(info OND_CHIPSET     = $(OND_CHIPSET))
#	$(info DEVICE_NAME     = $(DEVICE_NAME))
#	$(info JIP_DEVICE_TYPE = $(JIP_DEVICE_TYPE))
#	$(info JIP_DEVICE_ID   = $(JIP_DEVICE_ID))
#	$(info OND_DEVICE_TYPE = $(OND_DEVICE_TYPE))
#	$(info VERSION         = $(VERSION))
#	${SIZE} --totals $(APPOBJS)
#	${SIZE} $<
#
## OND Enabled  
#else
#
#$(NAME_PREFIX)_$(JN_TARGET)_$(NAME_POSTFIX)$(BIN_SUFFIX).img: $(APP_BIN_DIR)/$(NAME_PREFIX)_$(JN_TARGET)_$(NAME_POSTFIX)$(BIN_SUFFIX).elf 
#	$(info Generating binary ...)
#	$(OBJCOPY) $< $$( $(OBJDUMP) -h $< | sed -n 's/^ *[0-9]* \(.rom[._[:alnum:]]*\).*/-R \1/p' )
#	$(OBJCOPY) -S -O binary $< $@
#	$(info JENNIC_CHIP     = $(JENNIC_CHIP))
#	$(info OND_CHIPSET     = $(OND_CHIPSET))
#	$(info DEVICE_NAME     = $(DEVICE_NAME))
#	$(info JIP_DEVICE_TYPE = $(JIP_DEVICE_TYPE))
#	$(info JIP_DEVICE_ID   = $(JIP_DEVICE_ID))
#	$(info OND_DEVICE_TYPE = $(OND_DEVICE_TYPE))
#	$(info VERSION         = $(VERSION))
#	${SIZE} --totals $(APPOBJS)
#	${SIZE} $<
#	
#ifeq ($(JENNIC_CHIP), JN5148)
#$(APP_BIN_DIR)/%.ond: %.img
#	$(info Generating OndUpdate $(VERSION) ...)
#	$(TOOL_BASE_DIR)/OND/OND_Checksum.exe $< $@
#
#$(APP_BIN_DIR)/%.bin: %.img
#	$(info Generating OndFull $(VERSION) $(TOUCHED)...)
#	$(TOOL_BASE_DIR)/OND/OND_Checksum.exe -s $(SDK_BASE_DIR)/Chip/$(JENNIC_CHIP)/Build/SSBL_64k.bin -f -r $< $@
#endif
#ifeq ($(JENNIC_CHIP), JN5148J01)
#$(APP_BIN_DIR)/%.ond: %.img
#	$(info Generating OndUpdate $(VERSION) ...)
#	$(TOOL_BASE_DIR)/OND/OND_Checksum.exe -m -v $(OND_DEVICE_TYPE) $(OND_CHIPSET) $(VERSION) $< $@
#$(APP_BIN_DIR)/%.bin: %.img
#	$(info Generating OndFull $(VERSION) ...)
#	$(TOOL_BASE_DIR)/OND/OND_Checksum.exe -f -v $(OND_DEVICE_TYPE) $(OND_CHIPSET) $(VERSION) $< $@
#endif
#ifeq ($(JENNIC_CHIP), JN5142J01)
#$(APP_BIN_DIR)/%.ond: %.img
#	$(info Generating OndUpdate $(VERSION) ...)
#	$(TOOL_BASE_DIR)/OND/OND_Checksum.exe -m -i 32 -v $(OND_DEVICE_TYPE) $(OND_CHIPSET) $(VERSION) $< $@
#$(APP_BIN_DIR)/%.bin: %.img
#	$(info Generating OndFull $(VERSION) ...)
#	$(TOOL_BASE_DIR)/OND/OND_Checksum.exe -f -i 32 -v $(OND_DEVICE_TYPE) $(OND_CHIPSET) $(VERSION) $< $@
#endif	
#ifeq ($(JENNIC_CHIP_FAMILY), JN516x)
#$(APP_BIN_DIR)/%.bin: %.img
#	$(info Generating OndFull $(VERSION) ...)
#	$(TOOL_BASE_DIR)/OND/OND_Checksum.exe -6 -m -t 62500 -v $(OND_DEVICE_TYPE) $(OND_CHIPSET) $(VERSION) $< $@
#endif
#
#endif
#
##########################################################################
#
##clean:
##	rm -f $(APPOBJS) $(APPDEPS) $(APP_BIN_DIR)/$(NAME_PREFIX)_$(JN_TARGET)_$(NAME_POSTFIX)$(BIN_SUFFIX).bin $(APP_BIN_DIR)/$(NAME_PREFIX)_$(JN_TARGET)_$(NAME_POSTFIX)$(BIN_SUFFIX).elf $(NAME_PREFIX)_$(JN_TARGET)_$(NAME_POSTFIX)$(BIN_SUFFIX).map $(APP_BIN_DIR)/$(NAME_PREFIX)_$(JN_TARGET)_$(NAME_POSTFIX)$(BIN_SUFFIX).ond $(NAME_PREFIX)_$(JN_TARGET)_$(NAME_POSTFIX)$(BIN_SUFFIX).dmp
#
##########################################################################
#
#ifdef CORE
#symbols.c symbols.h:
#	$(NM) $(CORE) | awk -f ../../tools/mknmlist > symbols.c
##	@${CONTIKI}/tools/make-symbols $(CORE)
#else
#symbols.c symbols.h:
#	@${CONTIKI}/tools/make-empty-symbols
#endif
